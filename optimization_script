-- Schema Creation
-- Creating schema for e-commerce data

CREATE SCHEMA ecommerce;

-- Create table for products
CREATE TABLE ecommerce.products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category VARCHAR(100),
    price DECIMAL(10, 2)
);

-- Create table for sales
CREATE TABLE ecommerce.sales (
    sale_id INT PRIMARY KEY,
    product_id INT REFERENCES ecommerce.products(product_id),
    sale_date DATE,
    quantity INT,
    total DECIMAL(10, 2)
);

-- Inserting sample data into products table
INSERT INTO ecommerce.products (product_id, product_name, category, price) VALUES 
(1, 'Laptop', 'Electronics', 1000.00),
(2, 'Smartphone', 'Electronics', 500.00),
(3, 'Desk Chair', 'Furniture', 150.00);

-- Inserting sample data into sales table
INSERT INTO ecommerce.sales (sale_id, product_id, sale_date, quantity, total) VALUES 
(1, 1, '2024-01-01', 2, 2000.00),
(2, 2, '2024-01-02', 3, 1500.00),
(3, 3, '2024-01-03', 1, 150.00);

-- Optimizing Query Performance
-- Creating indexes to improve query performance

-- Index on product_id in sales table for faster joins
CREATE INDEX idx_sales_product_id ON ecommerce.sales (product_id);

-- Index on sale_date in sales table for faster date range queries
CREATE INDEX idx_sales_sale_date ON ecommerce.sales (sale_date);

-- Analyze Command
-- Gathering statistics for the query optimizer

ANALYZE ecommerce.products;
ANALYZE ecommerce.sales;

-- Optimized Query Examples

-- Example 1: Total sales by product
SELECT 
    p.product_name,
    SUM(s.total) AS total_sales
FROM 
    ecommerce.products p
JOIN 
    ecommerce.sales s ON p.product_id = s.product_id
GROUP BY 
    p.product_name
ORDER BY 
    total_sales DESC;

-- Example 2: Monthly sales trends
SELECT 
    DATE_TRUNC('month', s.sale_date) AS month,
    SUM(s.total) AS monthly_sales
FROM 
    ecommerce.sales s
GROUP BY 
    month
ORDER BY 
    month;

-- Example 3: Top selling products in a date range
SELECT 
    p.product_name,
    SUM(s.quantity) AS total_quantity_sold
FROM 
    ecommerce.products p
JOIN 
    ecommerce.sales s ON p.product_id = s.product_id
WHERE 
    s.sale_date BETWEEN '2024-01-01' AND '2024-01-31'
GROUP BY 
    p.product_name
ORDER BY 
    total_quantity_sold DESC;

-- Performance Enhancements
-- Vacuum Command
-- Reclaim storage occupied by dead tuples

VACUUM FULL ecommerce.products;
VACUUM FULL ecommerce.sales;

-- Using Partitioning
-- Partitioning the sales table for faster access to large datasets

-- Example: Partition by Year
CREATE TABLE ecommerce.sales_2024 PARTITION OF ecommerce.sales FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');

-- 0 0 * * 0 psql -U username -d database -f /path/to/optimization_script.sql for cron job

